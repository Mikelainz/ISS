/* Generated by AN DISI Unibo */ 
package it.unibo.qatestplans;
import java.util.Iterator;

import alice.tuprolog.Prolog;
import alice.tuprolog.SolveInfo;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractQatestplans extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractQatestplans(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qatestplans/WorldTheory.pl",
			setTheEnv( outEnvView )  , "main");		
			this.planFilePath = "./srcMore/it/unibo/qatestplans/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
	 		initSensorSystem();
			boolean res = main();
			//println(getName() + " doJob " + res );
			QActorContext.terminateQActorSystem(this);
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean main() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "main";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "main";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"qatestplans STARTS \"";
	    		println( temporaryStr );  
	    		if( ! planUtils.switchToPlan("workWithPlan").getGoon() ) break;
	    		temporaryStr = "\"qatestplans ENDS \"";
	    		println( temporaryStr );  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=main WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean workWithPlan() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "workWithPlan";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "workWithPlan";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		//aar = solveGoal( "consult( \"././srcMore/it/unibo/qa0/plans.txt\" )", 0, "","" , ""  );	   
	    		QActorUtils.consultFromFile( pengine, "./srcMore/it/unibo/qa0/plans.txt" ); 
	    		temporaryStr = "\"workWithPlan loaded \"";
	    		println( temporaryStr );  
	    		/* MARCH2017
	    			    alice.tuprolog.SolveInfo sss = QActorUtils.solveGoal("runPlan(main)", pengine );
	    			    if( ! sss.isSuccess()){
	    			    		println("run plan main failed");
	    			    		 break;
	    			    }
	    		*/
	    			parg = "runPlan(main)";
	    			//MARCH2017
	    			aar = solveGoalReactive(parg,9000,"","");
	    			if( aar.getInterrupted() ){
	    				curPlanInExec   = "init";
	    				if( aar.getTimeRemained() <= 0 ) addRule("tout(runPlan,"+getName()+")");
	    				if( ! aar.getGoon() ) break;
	    			} 			
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=workWithPlan WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean handleAlarm() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "handleAlarm";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "handleAlarm";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"qatestplans handleAlarm \"";
	    		println( temporaryStr );  
	    		parg = "fibo(8,V)";
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(R)" )) != null ){
	    		temporaryStr = "uuuuuu(R)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
/*
	    		parg = "actorOp(sendMsg(\"info\",\"evsource\",\"dispatch\",\"ok\"))";
	    		println( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS " + parg );  
	    		aar = solveGoalReactive(parg, 3600000,"","");
 	    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "handleAlarm";
	    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
	    			if( ! aar.getGoon() ) break;
	    		} 		

	    		parg = "actorOp(testReflectString(8))";
	    		println( "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS " + parg );  
	    		aar = solveGoalReactive(parg, 3600000,"","");
 	    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "handleAlarm";
	    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
	    			if( ! aar.getGoon() ) break;
	    		} 		
	    		*/
	    		
 	    		
//	    		parg = "opInfo( sendMsg(\"info\",\"evsource\",\"dispatch\",\"221\"),F,A,L )";
     		
	    		parg = "sendMsg(\"info\",\"evsource\",\"dispatch\",\"221\")";
	    		println( "SSS1 " + parg );
	    		aar = actorOpExecuteReactive( parg,3600000,"","" );
	    		println( "AAAAAAAAAAAAAAAAAAAAAAAAAAAA " + aar.getResult() );
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "handleAlarm";
	    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
	    			if( ! aar.getGoon() ) break;
	    		}else{
		 			String gg = "storeActorOpResult( X, Y )".replace("X", parg).replace("Y",aar.getResult() );
		 			System.out.println("actorOpExecute gg=" + gg );
	 	 			SolveInfo sol = pengine.solve(gg+".");
	  				println("%%%  ActionOpTimed " + parg + " ENDS NORMALLY " + sol);
	  				
 		    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?actorOpDone(OP,RES)" )) != null ){
			    		String temporaryStr = "done(OP,RES)";
			    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
			    		println( "%%%  ActionOpTimed temporaryStr=" + temporaryStr );  
		    		}
	    			
	    		}
     
	    	/*
	    		parg = "testReflectString(\"8\")";
	    		println( "SSSS2 " + parg );
	    		aar = actorOpExecuteReactive( parg,3600000,"","" );
	    		println( "AAAAAAAAAAAAAAAAAAAAAAAAAAAA " + aar );
	    		if( aar.getInterrupted() ){
	    			curPlanInExec   = "handleAlarm";
	    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
	    			if( ! aar.getGoon() ) break;
	    		} 		
 	    		
 	    		
 	    		*/
	    	/*
	    		SolveInfo sol = QActorUtils.solveGoal( parg,pengine );
	    		println("sol ==== FUNCTOR= " + sol.getVarValue("F"));
	    		int arity = Integer.parseInt(""+sol.getVarValue("A"));
	    		println("sol ==== ARITY  = "    + sol.getVarValue("A") + " arity=" + arity);
	    		println("sol ==== ARGS   = " + sol.getVarValue("L"));
	    		
 	    		
	    		Object[] params    = new Object[ arity ];
	    		Class[]  paramType = new Class[  arity ];
	    		
 	    		Term tt = sol.getVarValue("L");
	    		Struct tts = (Struct) sol.getVarValue("L");
	    		
	    		int paramCount = 0;
	    		Iterator<? extends Term> iter = tts.listIterator();
	    		iter.next(); //skip the functor
	    		while( iter.hasNext() ){
	    			Term curt = iter.next();
	    			//Struct atomic => list
	    			println("	argtype=" + curt.getClass().getName()  + " isAtomic=" + curt.isAtomic());
	    			if( curt instanceof alice.tuprolog.Int ){
	    				paramType[ paramCount  ]   = Integer.class;
	    			}else paramType[ paramCount  ] = String.class;
	    			params[ paramCount  ]    = ""+curt;
 	    			paramCount++;
	    		}
//	    		println("params    = " + params  );
//	    		println("paramType = " + paramType  );
	    		
	    		for( int i=0; i<arity; i++){
	    			println("arg [" + i + "]=" +  params[i]  );
	    			println("type[" + i + "]=" +  paramType[i]  );
	    		}
	    		
	    		Object[] args = new Object[]{ new String("info"),  new String("evsource"), new String("dispatch"), new String("ok")};
//	    		Object b = this.execByReflection( this.getClass(),"sendMsg",args );
	    		Object b = this.execByReflection( this.getClass(),"sendMsg",params, paramType);
	    		println("execByReflection RESULT=" + b);
	    	*/
	    		//QActorUtils.solveGoal(parg,pengine );
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=handleAlarm WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    
 
	    public boolean prologFailure() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "prologFailure";
	    	boolean returnValue = suspendWork;		//MARCHH2017
	    while(true){
	    	curPlanInExec =  "prologFailure";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"failure in solving a Prolog goal\"";
	    		println( temporaryStr );  
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=prologFailure WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
