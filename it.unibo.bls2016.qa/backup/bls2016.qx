/*
 * This is A MODEL
 * defined during problem analysis 
 * by using a CUSTOM meta-model / language
 */     
System bls2016
/*
 * Declaration of the messages and events occuring in the system
 *     atom : atom | struct
 */
Dispatch turnLed 		: turnLed(X)
Dispatch click   		: click(V)  
Event local_clicked     : clicked
Event clicked    		: clicked 
/* 
 * Declaration of the computational nodes
 */
Context ctxLocal ip [host="localhost" port=8010]  -g cyan  
//Context ctxButton ip [host="localhost" port=8010]  -g cyan
//Context ctxLed ip [host="localhost" port=8015]  -g yellow

/*  
 * Definition of the button
 * ---------------------------------------------------------------------------
 * A button is an entity that DOES NOT KNOW any led. It could
 * 	- emit a local event
 *  - emit a system-wide (global) event
 *  - interact with a controller (local or remote)
 * 		in a conventional OO way (as an OBSEVABLE with reference to the pattern OBSERVER)
 * 	    in a message-passing way by
 * 			sending a dispatch to a controller
 * 			sending a invitation 
 *          sending a request to the controller
 * The button works under the control of an human user via a proper
 * logical or physical interface
 *     
 * ---------------------------------------------------------------------------
 */ 
QActor button context ctxLocal   {   
	Plan init  normal      
		println("button STARTS");
		solve consult("./blsTheory.pl") time(0)  onFailSwitchTo prologFailure ; 
		solve createPojoButton(arduino,"COM9",local_clicked,clicked) time(0)  onFailSwitchTo prologFailure   
//		switchToPlan simulateWork 
 	Plan simulateWork 
  		[ !? mode(eventbased)]	switchToPlan workWithEvents ;
 		[ !? mode(msgbased)]	switchToPlan workWithMessages
 	Plan workWithEvents  
   		delay time(1000) ;
 		println("button emits an event" ) ;
//  		emit local_clicked : clicked  ;  
  		[ !? val(X) ]  emit local_clicked  : X ;   
  		repeatPlan 3  
 	Plan workWithMessages     	  
		// solve createTheButton time(1000)
//		println("button CLICK");
		forward controller -m click : click(done);
		delay time(1000) ;
		forward controller -m click : click(done) ;
		delay time(1000) ; 
		repeatPlan 2  
	Plan prologFailure resumeLastPlan   
		println("button has failed to solve a Prolog goal" )        
	
}   
/*
 * Definition of the controller
 * ---------------------------------------------------------------------------
 * The controller must 
 *     1)  wait for some command/event/message from the button
 *     2)  elaborate the input from the button
 *     3)  emit some event or send a message to the led 
 * ---------------------------------------------------------------------------
 */      
QActor controller context ctxLocal   {  
	Rules{ 
		waitTime( 600000 ).      
	}     
	Plan init  normal     
		[ !? waitTime(TOUT)] println( controller( starts, wait(TOUT,msecs)) );
		solve consult("./blsTheory.pl") time(0)  onFailSwitchTo prologFailure ; 
 		switchToPlan work
  	Plan work            
 	//This is just a simulation
 		[ !? mode(eventbased)]	switchToPlan workWithEvents ;
 		[ !? mode(msgbased)]	switchToPlan workWithMessages
 	Plan workWithEvents
 		println("controller WAITS FOR local_clicked event");
 		[ !? waitTime(TOUT)] sense time(TOUT) local_clicked -> continue ;
 		switchToPlan checkTout ; 
 		[ !? ledSwitch(V) ] forward led -m turnLed:turnLed(V) ;
 		repeatPlan 0
 	Plan workWithMessages     	
		println("controller WAITS FOR A click message");
//		receiveMsg time(20000) ;	//click
		receiveTheMsg m(click,dispatch,Sender,controller,click(V),F ) time(3000) ;	 
  		switchToPlan checkToutMsg ;
    	[ !? ledSwitch(V) ] forward led -m turnLed:turnLed(V);
  		repeatPlan 0
	Plan prologFailure resumeLastPlan   
		println("controller has failed to solve a Prolog goal" )      
	Plan checkTout 
		printCurrentEvent ;
 		memoCurrentEvent ;
 		[  ?? msg(_,_,_,none,clicked,_) ] resumeLastPlan
	Plan checkToutMsg 
		printCurrentMessage ;
 		memoCurrentMessage ;
 		[  ?? msg(click,dispatch,_,Sender,click(V),_) ] resumeLastPlan
 }	

/*
 * Definition of the led
 * ---------------------------------------------------------------------------
 * The led must
 *     1)  wait for some command/event/message (from the controller)
 *     2) elaborate the input
 * ---------------------------------------------------------------------------
 */
QActor led context ctxLocal   {     
	Rules{    
		a(1).  
	}         
	Plan init  normal          
 		println("led STARTS");
 		solve consult("./blsTheory.pl") time(0)  onFailSwitchTo prologFailure ; 
 		solve createPojoLed(gui) time(0)  onFailSwitchTo prologFailure ;  
 		switchToPlan work  
 	Plan work     	               
  		println("led WAITS FOR A COMMAND");
		receiveMsg time(300000); //after 300 secs end the timeout 
		printCurrentMessage ;      
		[!? a(X) ] onMsg turnLed : turnLed(X)  ->  println( outt(X ) ) ;   //print the X of the guard       
		[!? a(X) ] onMsg turnLed : turnLed(V)  ->  println( outt(X,V ) ) ;          
 		onMsg turnLed : turnLed(V)  ->  solve updatePojoLed(V) time(0)  onFailSwitchTo prologFailure ;   
		onMsg turnLed : turnLed(V)  ->  addRule frommsg(V) ; 
		[ ?? frommsg(V) ]    println( uuu(V) ) ;
 		repeatPlan 0
	Plan prologFailure resumeLastPlan   
		println("led has failed to solve a Prolog goal" )      
}