System blsDistributed

Event buttonEvent : startBlinkLed(BLINKINTERVAL)    
Event buttonEvent : stopBlinkLed
Event timeoutEvent : timeoutEvent
     
Context ctxButton ip [host="localhost" port=8010]  -g cyan
Context ctxLed ip [host="localhost" port=8030] -g cyan
// Context ctxLed ip [host="192.168.137.2" port=8030]   // u can't use GUI  while this is running on RB
/* there we need to use two different settings in order to have the LED on the RB and the button on PC
 * [adresses are based on an ethernet connection]
 * PC conf -> button local and LED remote
 * Context ctxButton ip [host="localhost" port=8010]  -g cyan
 * Context ctxLed ip [host="192.168.137.2" port=8030]  -g cyan
 * RB conf ->
 * Context ctxButton ip [host="192.168.137.1" port=8010]  -g cyan
 * Context ctxLed ip [host="localhost" port=8030]
 * after this we need to compile the build of the gradle file (second line), copy and unzip the zip file on the RB (e just need the led part of the project)
 * then we can run our project with java -jar name_of_the_prject.jar or the RB and just run on the pc
 */ 
 
QActor timer context ctxButton {
	Plan init normal
		println("timer INITIALIZED");
 		switchToPlan work 	
	
	Plan work
 		sense time(60000) buttonEvent -> continue;
 		printCurrentEvent;
 		onEvent buttonEvent : startBlinkLed(BLINKINTERVAL)   -> switchToPlan startTo;
 		repeatPlan
 	
 	Plan startTo
 //		sensible in case of more presses of start button
 		sense time(5000) buttonEvent -> continue;
 		onEvent buttonEvent : startBlinkLed(BLINKINTERVAL)   -> switchToPlan startTo;
 		onEvent buttonEvent : stopBlinkLed  -> switchToPlan work;
 		printCurrentEvent;
 		emit timeoutEvent : timeoutEvent;
 //		message version of timeout	
 //		forward myled -m stopBlinkLed : stopBlinkLed;
 		switchToPlan work
 		
 }
 
QActor myled context ctxLed   {        
	Plan init  normal      
		println("myLed  STARTS");
		switchToPlan sysWithGuiOnPc;
//		switchToPlan sysOnRasp;
		switchToPlan work;		
 		delay time(60000);
 		println("myLed  ENDS")
 		
	Plan sysWithGuiOnPc
		actorOp createGuiLed( 25 ) 	;
		resumeLastPlan     

	Plan sysOnRasp
		actorOp createPi4jLed( 25 ) ;	    //BCM 25 WPI 6
		resumeLastPlan
 
 	Plan work 
 		sense time(60000) buttonEvent -> continue;
 		onEvent buttonEvent : startBlinkLed(BLINKINTERVAL)   -> switchToPlan startBlink;
 		onEvent buttonEvent : stopBlinkLed  -> switchToPlan stopBlink;	
 		printCurrentMessage;
 		repeatPlan
	
 	Plan startBlink // no timeout version
 		actorOp switchLedState;
 		sense time(1000) buttonEvent /*, timeoutEvent */ -> continue; 		
// 		printCurrentEvent;
//		onEvent timeoutEvent : timeoutEvent -> switchToPlan stopBlink;
// 		what happens when we re-click start button in this routine? Does it have to restart or not?
// 		onEvent buttonEvent : startBlinkLed(BLINKINTERVAL)   -> switchToPlan startBlink;
 		onEvent buttonEvent : stopBlinkLed  -> switchToPlan stopBlink;	
 		repeatPlan
 		
 	Plan stopBlink
 		actorOp turnOff;
 		switchToPlan work
 		
} 
 
QActor mybutton context ctxButton   {        
	Plan init  normal      
		println("myButton  STARTS");
		switchToPlan sysWithGuiOnPc;
//		switchToPlan sysOnRasp;		
// 		delay time(60000);
		switchToPlan work;
 		println("myButton  ENDS")
 		
	Plan sysWithGuiOnPc        
 		actorOp createGuiButton( 24 , "start" ) ;	
 		actorOp createGuiButton( 23 , "stop" ) ;
		resumeLastPlan     

  	Plan sysOnRasp       
 		actorOp createPi4jButton( 24 ) ;	//BCM 24 WPI 5
		resumeLastPlan
  
  	Plan work
  		sense time(60000) timeoutEvent -> continue;
 		printCurrentEvent;
 		onEvent timeoutEvent : timeoutEvent -> emit buttonEvent : stopBlinkLed;
 		repeatPlan
 
}   
