/* 
 * ==============================================================
 * sonarSensorEmitter.qa
 * 
 * wellow		192.168.251.118 	angle = 30
 * green 		192.168.251.120 	angle = 90
 * red			192.168.251.121 	angle = 150
 * ==============================================================
 */   
System sonarSensorEmitter   
Event sonar    : p( Distance, Angle  )  
  
Context  ctxRadar    ip [ host="localhost"  port=8033 ]  -standalone  	//192.168.251.1
Context  ctxSensorEmitter  ip [ host="localhost"  port=8133 ]            //192.168.251.118 192.168.251.121 192.168.251.120
 
/*
 * -----------------------------------------
 * SENSOR SIMULATOR
 * -----------------------------------------
 */ 
QActor sensorsonar context ctxSensorEmitter  {    
Rules{
	/* PLEASE CHANGE  */
		//onRaspberry.  
		mysonarcolor( coloryellow ).	//host="192.168.251.118" 
		//mysonarcolor( colorred ).		//host="192.168.251.121" 
		//mysonarcolor( colorgreen ).	//host="192.168.251.120" 
		
	/* SIMULATION DATA */	
		p(80,0). p(85,20). p(90,40). p(85,60). p(85,80). p(80,100). p(75,120). p(70,140).p(65,160). p(70,180).
	/* RULES */
		sonar(coloryellow,118,30).
		sonar(colorred,121,90).
		sonar(colorgreen,120,150).
	
		setmydirection  :-  
			mysonarcolor( COLOR ), sonar(COLOR,_,POS), assert( direction( POS ) ).
		
		obstacledata( p(D,POS) ) :- 
			actorOpDone( _,d(D) ), 	//set by actorOp getDistanceFromSonar
			direction(POS).
	/* */
	}	
 	Plan init normal     
 		//println("sensorsonar STARTS")  ; 
		[ !? onRaspberry ] actorOp startSonarC ;
  		demo setmydirection ;
  		demo direction(POS) ;
 		[ ?? goalResult( R )] println( sensorsonar(R) )  ;       
 		switchToPlan workSimulate ;
   		[ !? onRaspberry ] switchToPlan workReal
 	Plan workSimulate   resumeLastPlan  
  	 	[ !? p(D, A) ] println(p(D, A)) else endPlan  "bye"; 
		[ ?? p(D, A) ] emit sonar : p(D,A) ;
		delay time(500) ;
		repeatPlan 9	 	
	Plan workReal 
 		println("sensorsonar workReal")  ;       
		actorOp getDistanceFromSonar ;
		[ !? obstacledata( VAL )] emit sonar : VAL ;
 		[ ?? actorOpDone(OP,R)] println( R ) ;
 		repeatPlan
}      
