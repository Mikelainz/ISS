/* 
 * ==============================================================
 * sonarMqtt.qa
 * 
 * ==============================================================
 */    
System sonarMqtt 
//Event sonar : p( Distance, Pos, Num  )    
Event sonar : p( Distance, SID   )    
    
Context  ctxSonarMqtt  ip [ host="localhost"  port=8133 ]            
   
QActor sonarmqtt context ctxSonarMqtt  {    
Rules{
	/* CONFIGURATION   */
	onRaspberry.   
	
	mqttServer("tcp://m2m.eclipse.org:1883").
	topic("unibo/mqtt/radar").

	config( MQTTSERV, TOPIC ):-   
		mqttServer(MQTTSERV),topic(TOPIC).
	
   	/* SIMULATION DATA */	   
   		p(80,10).p(70,20).p(60,30).p(50,40).p(40,50).p(30,60).p(20,70).p(40,80).p(60,90).p(80,100).
 	/* RULES */
		obstacledata( p(D,90) ) :- 
 			retract( actorOpDone( _,d(D) ) ). //actorOpDone set by actorOp getDistanceFromSonar (1)	
	}	  
 	Plan init normal     
 		println("sensorsonar STARTS")  ;
		[ !? onRaspberry ] actorOp startSonarC ;
  	//1) connect to the MQTT server
		[!? config( MQTTSERV,TSEND)] actorOp connectToSend( sonar114, MQTTSERV, TSEND ) ;
		
 		switchToPlan workSimulate ;
  		println("sensorsonar workReal")  ;       
  		[ !? onRaspberry ] switchToPlan workReal
 	Plan workSimulate   resumeLastPlan  
  	 	[ !? p(DIST, SID) ] println(p(DIST, SID)) else endPlan  "bye"; 	//p(D,SID) does not work
		[ ?? p(DIST, SID) ] actorOp sendMsgMqtt("unibo/mqtt/radar", polar, sonar114, p(DIST, SID)) ;
		delay time(500) ;
		repeatPlan 9	 	
	Plan workReal 
	//2) acquire data from sonar
		delay time(1000);
		actorOp getDistanceFromSonar ;			//(1)
	//3) send data  
		[ !? obstacledata( DATA )] //emit sonar : DATA ;
    			actorOp sendMsgMqtt("unibo/mqtt/radar", polar, sonar114, DATA) ;
  		repeatPlan
}      
