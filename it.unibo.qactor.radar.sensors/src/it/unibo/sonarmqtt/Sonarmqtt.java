/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.sonarmqtt;
import java.io.BufferedReader;

import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

public class Sonarmqtt extends AbstractSonarmqtt { 
	protected BufferedReader readerC;
	protected String distanceStr = ""; //d(  distance  )
	private int previousDistance = 0;
	private int curDistance      = 0;
	protected int counter = 1;
	public Sonarmqtt(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
	}
	public void startSonarC(){
  		try {
  			println("startSonarC"   );
			Process p = Runtime.getRuntime().exec("sudo ./SonarAlone");
			readerC   = new BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
			println("Process in C STARTED "  +  readerC);			
			println("Process in C reads   "  +  getDistanceFromSonar() );
		} catch (Exception e) {
 			e.printStackTrace();
		}		
	}	
	
	public String getDistanceFromSonar(){
		try {
 			while( Math.abs( curDistance - previousDistance) < 3 || curDistance > 90 ){
				String inpS     = readerC.readLine();	
				curDistance     = Integer.parseInt(inpS);
 			}
 			//Sonar produces a new line every 300 msec
 			//we consume all the lines until a 'different' distance is found
 			previousDistance    = curDistance;
 			println("curDistance=" + curDistance  );
 			return "d("+curDistance+")";
		} catch (Exception e) {
 			e.printStackTrace();
 			return "d(0)"; 
		}
	}	

	
}
