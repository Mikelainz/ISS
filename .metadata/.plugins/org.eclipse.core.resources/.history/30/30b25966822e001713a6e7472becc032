System gameStep0

Event buttonEvent:buttonEvent(X)
Event controlEvent:controlEvent(X)

Dispatch controlMessage:controlMessage(X)
Dispatch ledMessage:ledMessage(X)

Context ctxButton ip [host="localhost" port=8010]  -g cyan
Context ctxControl ip [host="localhost" port=8020] -g green
Context ctxLed ip [host="localhost" port=8030] -g yellow

QActor mycontrol context ctxControl {
	
	Plan init normal
		println (mycontrol(starts));
		switchToPlan work
		
	Plan work
 		sense time(60000) buttonEvent -> continue;
 		printCurrentEvent;
 		onEvent buttonEvent:buttonEvent(X) -> switchToPlan startingGame;
 		repeatPlan
 		
 	Plan startingGame
 		forward flashled -m controlMessage : controlMessage("stopFlash"); //say to the flashled to stop the blink
 		actorOp resetScore;
 		forward myled -m controlMessage : controlMessage("startPattern"); 
 		delay time(5000) react event buttonEvent -> gameOver;
 		forward myled -m controlMessage : controlMessage("stopPattern"); 
 		switchToPlan game
 		
 	Plan game
 		println("game")
 		
 	Plan gameOver
 		actorOp printScore
 		//maybe restart?
 	
	
}

QActor mybutton context ctxButton {
	
	Plan init normal
		println(qabutton(starts));
 		switchToPlan sysOnPc;
// 		switchToPlan sysOnRasp;
  		delay time(60000);
 		println(qabutton(ends))
 	
 	Plan sysOnPc
 		actorOp createGuiButton(24, "button1");
		resumeLastPlan
		
	Plan sysOnRasp
		actorOp createPi4jButton( 24 , "button1");
		resumeLastPlan
		
}

QActor flashled context ctxLed{
	
	Plan init  normal      
		println("flashled(starts)");
		switchToPlan sysWithGuiOnPc;
//		switchToPlan sysOnRasp;
		switchToPlan preGame;
		actorOp turnOff;
		switchToPlan game;	
 		println("flashled(ends)")
 		
	Plan sysWithGuiOnPc
		actorOp createGuiLed( 25 ) 	;
		resumeLastPlan     

	Plan sysOnRasp
		actorOp createPi4jLed( 25 ) ;
		resumeLastPlan
		
	Plan preGame
		receiveMsg time (500);
		printCurrentMessage;
		onMsg controlMessage:controlMessage("stopFlash") -> resumeLastPlan;
		actorOp switchLedState;
		repeatPlan
		
	Plan game
		receiveMsg time(60000);
		printCurrentMessage;
		[ !?tout(R,W)] println( tout(R,W) );
		[ ??tout(R,W)] resumeLastPlan;
		onMsg controlMessage:controlMessage("error") -> resumeLastPlan;
//considering the fact that the message is not an error and that the game is not longer than 60 seconds
//reaching this point assure that we received the correct message, so that we can avoid to use another plan
		actorOp turnOn;
		delay time(250);
		actorOp turnOff;
		repeatPlan
	
}

QActor myled context ctxLed {

	Plan init normal          
  		println(qaled(starts));
  		switchToPlan sysOnPc;
 //		switchToPlan sysOnRasp;
  		switchToPlan work;
  		delay time(60000);
 		println(qaled(ends))
 		
 	Plan sysOnPc
 		actorOp createGuiLed(25);
		resumeLastPlan
	
	Plan sysOnRasp
		actorOp createPi4jLed(25);
		resumeLastPlan
		
 	Plan work
 		receiveMsg time(60000);
 		onMsg controlMessage : controlMessage("startPattern") -> switchToPlan pattern;
 		repeatPlan
 		
 	Plan pattern
 		actorOp switchLedState;
 		receiveMsg time(500);
 		onMsg controlMessage : controlMessage("stopPattern") -> switchToPlan game;
 		repeatPlan
 		
 	Plan game
 		actorOp turnOn
 		
}





