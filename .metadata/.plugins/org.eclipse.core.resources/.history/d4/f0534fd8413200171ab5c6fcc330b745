System gameStep1

Event buttonEvent:buttonEvent(X)
Event controlEvent:controlEvent(X)

Dispatch controlMessage:controlMessage(X)
Dispatch ledMessage:ledMessage(X)

Context ctxButton ip [host="192.168.137.2" port=8010]  //-g cyan
Context ctxControl ip [host="localhost" port=8020] -g green
Context ctxLed ip [host="192.168.137.2" port=8030] //-g yellow

QActor mycontrol context ctxControl {
	
	Rules{
		match(button0,0).
		match(button1,1).
		match(button2,2).
		testOk(B,L):-match(B,L), retract(buttonPressed(B)), retract(ledOn(L)). 
	}
	
	Plan init normal
		println (mycontrol(starts));
		switchToPlan work
		
	Plan work
 		sense time(60000) buttonEvent -> continue;
 		printCurrentEvent;
 		onEvent buttonEvent:buttonEvent(X) -> switchToPlan startingGame;
 		repeatPlan
 		
 	Plan startingGame
 		forward flashled -m controlMessage : controlMessage("stopFlash"); //say to the flashled to stop the blink
 		actorOp resetStats;
 		switchToPlan pattern
 		
 	Plan pattern
 		forward myled -m controlMessage : controlMessage("startPattern"); 
 		actorOp getRandomDTstop;
 		[ ?? actorOpDone(OP, DTstop) ] delay time(DTstop) react event buttonEvent -> gameOver;
 		forward myled -m controlMessage : controlMessage("stopPattern"); 
 		switchToPlan game
 		
 	Plan game
 		println("game");
 		receiveMsg time(50);
 		onMsg ledMessage:ledMessage(CurrentOn) -> addRule ledOn(CurrentOn);
 		actorOp saveStartTime;
 		actorOp halveDTthreshold;
 		[ ?? actorOpDone(OP, DTthreshold) ] sense time(DTthreshold) buttonEvent -> continue;
 		onEvent buttonEvent : buttonEvent(ButtonPressed) -> addRule buttonPressed(ButtonPressed);
 		[ !? testOk(B,L) ] switchToPlan rightAnswer;
 		[ ?? tout(R,W) ]  println("timed out"); // we need to consume tout but can't just make continue
 		println("wrong button pressed");//that's not correct indeed
 		switchToPlan gameOver
 	
 	Plan rightAnswer
 		forward flashled -m controlMessage:controlMessage("goOn");
 		actorOp updateScore;
 		[ ?? actorOpDone(OP,CurrentScore)] println(currentScore(CurrentScore));
 		switchToPlan pattern
 		
 	Plan gameOver
 		forward flashled -m controlMessage : controlMessage("gameOver");
 		forward myled -m controlMessage : controlMessage("gameOver");
 		actorOp printScore;
 		[ ?? actorOpDone(OP,FinalScore)] println(finalScore(FinalScore));
 		println (mycontrol(stops));
 		delay time(5000);
 		switchToPlan work
 	
	
}

QActor mybutton context ctxButton {
	
	Plan init normal
		println(qabutton(starts));
// 		switchToPlan sysOnPc;
 		switchToPlan sysOnRasp;
  		delay time(6000000);
 		println(qabutton(ends))
 	
 	Plan sysOnPc
 		actorOp createGuiButton(24, button0); //pin18
 		actorOp createGuiButton(20, button1); //pin38
 		actorOp createGuiButton(21, button2); //pin40
		resumeLastPlan
		
	Plan sysOnRasp
		actorOp createPi4jButton( 24 , button0);
		actorOp createPi4jButton( 20 , button1);
//		actorOp createPi4jButton( 21 , button2);
		resumeLastPlan
		
}

QActor flashled context ctxLed{
	
	Plan init  normal      
		println("flashled(starts)");
//		switchToPlan sysWithGuiOnPc;
		switchToPlan sysOnRasp;
		switchToPlan preGame
		
 		
	Plan sysWithGuiOnPc
		actorOp createGuiLed( 23 ) 	;
		resumeLastPlan     

	Plan sysOnRasp
		actorOp createPi4jLed( 23 ) ;
		resumeLastPlan
		
	Plan preGame
		receiveMsg time(500);
		[ ?? tout(R,W) ] println("Consumo il tout");
		//flashled_ctrl currentMessage=msg(controlMessage,dispatch,mycontrol_ctrl,flashled,controlMessage(stopFlash),2)
		//onMsg controlMessage:controlMessage("stopFlash") -> printCurrentMessage;
		onMsg controlMessage:controlMessage("stopFlash") -> switchToPlan game;
		actorOp switchLedState;
		repeatPlan
		
	Plan game
		actorOp turnOff;
		receiveMsg time(60000);
		[ ??tout(R,W)] switchToPlan gameOver; 
		onMsg controlMessage:controlMessage("gameOver") -> switchToPlan gameOver;
//considering the fact that the message is not an error and that the game is not longer than 60 seconds
//reaching this point assure that we received the correct message, so that we can avoid to use another plan
		actorOp turnOn;
		delay time(250);
		actorOp turnOff;
		repeatPlan
		
	Plan gameOver
 		println("flashled(ends)");
 		delay time(5000);
 		switchToPlan preGame
	
}

QActor myled context ctxLed {

	Plan init normal          
  		println(qaled(starts));
// 		switchToPlan sysOnPc;
		switchToPlan sysOnRasp;
  		switchToPlan work
 		
 	Plan sysOnPc
 		actorOp createGuiLed(25); //pin 22
 		actorOp createGuiLed(12); //pin 32
 		actorOp createGuiLed(16); //pin 36
		resumeLastPlan
	
	Plan sysOnRasp
		actorOp createPi4jLed(25);
		actorOp createPi4jLed(12);
//		actorOp createPi4jLed(16);
		resumeLastPlan
		
 	Plan work
 		receiveMsg time(60000);
 		onMsg controlMessage : controlMessage("startPattern") -> switchToPlan pattern;
 		onMsg controlMessage : controlMessage("gameOver") -> switchToPlan gameOver;
 		repeatPlan
 		
 	Plan pattern
 		actorOp changeLedOn;
 		receiveMsg time(500); //potenziometro
 		onMsg controlMessage : controlMessage("stopPattern") -> switchToPlan game;
 		onMsg controlMessage : controlMessage("gameOver") -> switchToPlan gameOver;
 		repeatPlan
 		
 	Plan game //added a mini blink to let player understand is time to press
 		actorOp turnOffCurrentLed;
 		delay time(100);
 		actorOp turnOnCurrentLed;
 		actorOp getCurrentOn;
 		[ ?? actorOpDone(OP, CurrentOn) ] forward mycontrol -m ledMessage:ledMessage(CurrentOn);
 		switchToPlan work
 		
 	Plan gameOver
 		actorOp turnOffAll;
 		println(qaled(ends));
 		delay time(5000);
 		switchToPlan work
 		
}





