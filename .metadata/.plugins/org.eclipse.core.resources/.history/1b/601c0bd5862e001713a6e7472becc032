/* Generated by AN DISI Unibo */ 
package it.unibo.flashled;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractFlashled extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractFlashled(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/flashled/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/flashled/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
			QActorContext.terminateQActorSystem(this);
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "init";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"flashled(starts)\"";
	    		println( temporaryStr );  
	    		if( ! planUtils.switchToPlan("sysWithGuiOnPc").getGoon() ) break;
	    		if( ! planUtils.switchToPlan("preGame").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=init WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sysWithGuiOnPc() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "sysWithGuiOnPc";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "sysWithGuiOnPc";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		parg = "actorOp(createGuiLed(25))";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		returnValue = continueWork; //we must restore nPlanIter and curPlanInExec of the 'interrupted' plan
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sysWithGuiOnPc WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sysOnRasp() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "sysOnRasp";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "sysOnRasp";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		parg = "actorOp(createPi4jLed(25))";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		returnValue = continueWork; //we must restore nPlanIter and curPlanInExec of the 'interrupted' plan
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sysOnRasp WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean preGame() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "preGame";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "preGame";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		//ReceiveMsg
	    		 		aar = planUtils.receiveAMsg(mysupport,500, "" , "" ); 	//could block
	    			    if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			    	//println("	WARNING: receivemsg timeout " + aar.getTimeRemained());
	    			    	addRule("tout(receivemsg,"+getName()+")");
	    			    }
	    		//onMsg
	    		if( currentMessage.msgId().equals("controlMessage") ){
	    			//println("WARNING: variable substitution not yet implmented " ); 
	    			printCurrentMessage(false);
	    		}//onMsg
	    		if( currentMessage.msgId().equals("controlMessage") ){
	    			String parg = "";
	    			/* SwitchPlan */
	    			parg =  updateVars(  Term.createTerm("controlMessage(X)"), Term.createTerm("controlMessage(\"stopFlash\")"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ){
	    					 if( ! planUtils.switchToPlan("game").getGoon() ) break; 
	    				}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		}parg = "actorOp(switchLedState)";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=preGame WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean game() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "game";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "game";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		parg = "actorOp(turnOff)";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		//ReceiveMsg
	    		 		aar = planUtils.receiveAMsg(mysupport,60000, "" , "" ); 	//could block
	    			    if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			    	//println("	WARNING: receivemsg timeout " + aar.getTimeRemained());
	    			    	addRule("tout(receivemsg,"+getName()+")");
	    			    }
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??tout(R,W)" )) != null ){
	    		returnValue = continueWork; //we must restore nPlanIter and curPlanInExec of the 'interrupted' plan
	    		}
	    		//onMsg
	    		if( currentMessage.msgId().equals("controlMessage") ){
	    			String parg = "";
	    			/* SwitchPlan */
	    			parg =  updateVars(  Term.createTerm("controlMessage(X)"), Term.createTerm("controlMessage(\"gameOver\")"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ){
	    					 if( ! planUtils.switchToPlan("gameOver").getGoon() ) break; 
	    				}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		}parg = "actorOp(turnOn)";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		//delay
	    		aar = delayReactive(250,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "game";
	    		if( ! aar.getGoon() ) break;
	    		parg = "actorOp(turnOff)";
	    		//aar = solveGoalReactive(parg,3600000,"","");
	    		//genCheckAar(m.name)»
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=game WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean gameOver() throws Exception{	//public to allow reflection
	    try{
	    	int nPlanIter = 0;
	    	//curPlanInExec =  "gameOver";
	    	boolean returnValue = suspendWork;
	    while(true){
	    	curPlanInExec =  "gameOver";	//within while since it can be lost by switchlan
	    	nPlanIter++;
	    		temporaryStr = "\"flashled(ends)\"";
	    		println( temporaryStr );  
	    		//delay
	    		aar = delayReactive(5000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "gameOver";
	    		if( ! aar.getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=gameOver WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
