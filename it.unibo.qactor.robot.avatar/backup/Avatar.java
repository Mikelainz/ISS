/* Generated by AN DISI Unibo */ 
package it.unibo.avatar;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.ActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.planned.QActorPlanned;
import it.unibo.qactors.action.ActionDummy;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.iot.executors.baseRobot.IBaseRobot; 

public class Avatar extends it.unibo.qactor.robot.RobotActor{ 
protected java.util.Hashtable<String, String> guardVars ;
protected AsynchActionResult aar = null;
protected boolean actionResult = true;
protected alice.tuprolog.SolveInfo sol;

	public Avatar(String actorId, ActorContext myCtx, IOutputEnvView outEnvView ,it.unibo.iot.executors.baseRobot.IBaseRobot baserobot)  throws Exception{
		super(actorId, myCtx, "./srcMore/it/unibo/avatar/plans.txt", 
		"./srcMore/it/unibo/avatar/WorldTheory.pl",
		outEnvView ,baserobot, "init");
 	}

	@Override
	protected void doJob() throws Exception {
		boolean res = init();
		//println(getName() + " doJob " + res );
	} 
	/* 
	* ------------------------------------------------------------
	* PLANS
	* ------------------------------------------------------------
	*/
    public boolean prologFailure() throws Exception{	//public to allow reflection
    	 	try{
    		 	curPlanInExec =  "prologFailure";
    		 	boolean returnValue = suspendWork;
    		 	while(true){
    		 		nPlanIter++;
    		  		println("Prolog goal FAILURE");
    		  		returnValue = continueWork;  
    		 		break;
    		 	}//while
    		 	return returnValue;
    	 	}catch(Exception e){
    	 		println( getName() + " ERROR " + e.getMessage() );
    	 		throw e;
    	 	}
    }
    public boolean testExtension() throws Exception{	//public to allow reflection
    	 	try{
    		 	curPlanInExec =  "testExtension";
    		 	boolean returnValue = suspendWork;
    		 	while(true){
    		 		nPlanIter++;
    		  		println("testExtension");
    		  		//solve goal false ...
    		  		aar = solveGoal( "execActor( xxx(  \"info\" ))", 0, "" , ""  );
    		  		if( aar.getResult().equals("failure")){
    		  			if( ! aar.getGoon() ) break;
    		  		}else if( ! aar.getGoon() ) break;
    		  		returnValue = continueWork;  
    		 		break;
    		 	}//while
    		 	return returnValue;
    	 	}catch(Exception e){
    	 		println( getName() + " ERROR " + e.getMessage() );
    	 		throw e;
    	 	}
    }
    public boolean doWork() throws Exception{	//public to allow reflection
    	 	try{
    		 	curPlanInExec =  "doWork";
    		 	boolean returnValue = suspendWork;
    		 	while(true){
    		 		nPlanIter++;
    		  		println("wait for user command");
    		  		//senseEvent
    		  		aar = senseEvents( 60000,"usercmd","continue",
    		  		"" , "",ActionExecMode.synch );
    		  		printCurrentEvent(true);
    		  		guardVars = evalTheGuard( "??msg( usercmd,_,EMITTER,none,X,T)" );
    		  		if( guardVars!= null )
    		  		{
    		  		//execUserCmd;
    		  		aar = executeActionAsFSM( new it.unibo.qactors.action.ActionApplication( outEnvView, 5000 , this, 
    		  			    	"execUserCmd" , "usercmd( _)" , guardVars.get("X")),
    		  					"" , "",ActionExecMode.synch );
    		  		}
    		  		guardVars = evalTheGuard( "!?repeat( on)" );
    		  		if( guardVars!= null )
    		  		{
    		  		if( ! switchToPlan("doWork").getGoon() ) break;
    		  		}
    		 		break;
    		 	}//while
    		 	return returnValue;
    	 	}catch(Exception e){
    	 		println( getName() + " ERROR " + e.getMessage() );
    	 		throw e;
    	 	}
    }
    public boolean init() throws Exception{	//public to allow reflection
    	 	try{
    		 	curPlanInExec =  "init";
    		 	boolean returnValue = suspendWork;
    		 	while(true){
    		 		nPlanIter++;
    		  		println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
    		  		println("A robot performs the command move sent by the user via http GUI");
    		  		println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
    		  		if( ! switchToPlan("doWork").getGoon() ) break;
    		  		println("ENDS");
    		 		break;
    		 	}//while
    		 	return returnValue;
    	 	}catch(Exception e){
    	 		println( getName() + " ERROR " + e.getMessage() );
    	 		throw e;
    	 	}
    }
    
	/* 
	* ------------------------------------------------------------
	* APPLICATION ACTIONS
	* ------------------------------------------------------------
	*/
public boolean execUserCmd( String defaultArg, String arg ){
	if( defaultArg.length() > 0 ){
		//The action args must represent a Prolog struct
		Struct targ = checkArgs( defaultArg,  arg);
		if( targ == null ) return false;
	}
	//TODO write the code action BODY
	return this.execCmdGui(arg);
 }//action execUserCmd
	
	protected Struct checkArgs(String defaultArg, String arg){
		try{
			Struct targ ;
		    if( arg.length() > 0 ){
				Struct tdefaultarg = (Struct) Term.createTerm( defaultArg );
				targ = (Struct) alice.tuprolog.Term.createTerm( arg.replace("'", "") );
				if( this.pengine.unify(tdefaultarg, targ)){
//					println(getName()+ " STARTS " + "action with arg=" + targ);
					return targ;
				}else {
					println(getName()+ " ERROR " + targ + " does tot unify with the default arg "  + tdefaultarg );
 				}
			}	
		}catch( Exception e){
				println(getName()+ " ENDS WITH FAILURE " + e.getMessage()  );
 		}
		return null;
	}//checkArgs
	
	protected boolean simulateRun(String actionName,int dt){
		try{
			Thread.sleep(dt);
			return true;
		}catch(Exception e){
			//println("simulateRun of " + actionName + " inerrupted");
			return false;
			
		}
	}	
  }

